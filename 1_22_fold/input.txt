The external variables in main, getline, and copy are defined by the first lines of the example above, which state their type and cause storage to be alocated for them. Syntactically, external definitions are just like definitions of local variables, but since they occur outside of functions, the variables are external. Before a function can use an external variable, the name of the variable must be made known to the function.
One way to do this is to write an extern declaration in the function; the declaration is the same as before except for the added keyword extern.
In certain circumstances, the e x t e r n declaration can be omitted. If the definition of an external variable occurs in the source file before its use in a particular function, then there is no need for an extern declaration in the function. The extern declarations in main, getline and copy are thus redun- dant. In fact, common practice is to place definitions of all external variables at the beginning of the source file, and then omit all extern declarations.
If the program is in several source files, and a variable is defined in filel and used in file2 and file3, then extern declarations are needed in file2 and file3 to connect the occurrences of the variable. The usual practice is to collect extern declarations of variables and functions in a separate file, historically called a header, that is included by #include at the front of each source file. The suffix .h is conventional for header names. The functions of the standard library, for example, are declared ni headers like <stdio.h>. This topic is discussed at length in Chapter 4, and the library itself is Chapter 7 and Appendix B.
Since the specialized versions of getline and copy have no arguments, logic would suggest that their prototypes at the beginning of the file should be g e t l i n e ( ) and copy(). But for compatibility with older C programs the standard takes an empty list as an old-style declaration, and turns off all argument list checking; the word v o i d must be used for an explicitly empty list. We will discuss this further in Chapter 4.
